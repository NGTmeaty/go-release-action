# action.yml
name: 'Go Release Binaries'
author: 'Jay Zhang <wangyoucao577@gmail.com>'
description: 'Build and Release Go Binaries to GitHub Release Assets'
inputs:
  github_token:
    description: 'GITHUB_TOKEN for uploading releases to Github asserts.'
    required: true
    default: ''
  goos:
    description: 'GOOS is the running programs operating system target: one of darwin, freebsd, linux, and so on.'
    required: true
    default: ''
  goarch:
    description: 'GOARCH is the running programs architecture target: one of 386, amd64, arm, s390x, loong64 and so on.'
    required: true
    default: ''
  goamd64:
    description: 'GOAMD64 is the running programs amd64 microarchitecture level: one of v1, v2, v3, v4.'
    required: false
    default: ''
  goarm:
    description: 'GOARM is the running programs arm microarchitecture level: ARMv5,ARMv6,ARMv7'
    required: false
    default: ''    
  gomips:
    description: 'GOMIPS is the running programs mips microarchitecture level: hardfloat,softfloat'
    required: false
    default: ''    
  goversion:
    description: 'The `Go` compiler version.'
    required: false
    default: ''
  build_flags:
    description: 'Additional arguments to pass the go build command.'
    required: false
    default: ''
  ldflags:
    description: 'Values to provide to the -ldflags argument'
    required: false
    default: ''
  project_path:
    description: 'Where to run `go build .`'
    required: false
    default: '.'
  binary_name:
    description: 'Specify another binary name if do not want to use repository basename'
    required: false
    default: ''
  pre_command:
    description: 'Extra command that will be executed before `go build`, may for solving dependency'
    required: false
    default: ''
  build_command:
    description: 'The actual command to build binary, typically `go build`.'
    required: false
    default: 'go build'
  executable_compression:
    description: 'Compression executable binary by some third-party tools. Only `upx` is supported at the moment.'
    required: false
    default: ''
  extra_files:
    description: 'Extra files that will be packaged into artifacts either.'
    required: false
    default: ''
  md5sum:
    description: 'Publish `.md5` along with artifacts.'
    required: false
    default: 'TRUE'
  sha256sum:
    description: 'Publish `.sha256` along with artifacts.'
    required: false
    default: 'FALSE'
  release_tag:
    description: 'Upload binaries to specified release page that indicated by Git tag.'
    required: false
    default: ''
  release_name:
    description: 'Upload binaries to specified release page that indicated by release name.'
    required: false
    default: ''
  release_repo:
    description: 'Repository to upload the binaries'
    required: false
    default: ''
  overwrite:
    description: "Overwrite asset if it's already exist."
    required: false
    default: 'FALSE'
  asset_name:
    description: 'Customize asset name if do not want to use the default format.'
    required: false
    default: ''
  retry:
    description: 'How many times retrying if upload fails.'
    required: false
    default: '3'
  post_command:
    description: 'Extra command that will be executed for teardown work'
    required: false
    default: ''
  compress_assets:
    description: 'Compress assets before uploading'
    required: false
    default: 'TRUE'
  upload:
    description: 'Upload release assets or not'
    required: false
    default: 'TRUE'
  multi_binaries:
    description: 'Build and package multiple binaries together'
    required: false
    default: 'FALSE'

outputs:
  release_asset_dir:
    description: 'Release file directory provided for use by other workflows'

runs:
  using: 'composite'
  steps:
    - name: Setup Go (with version file)
      uses: actions/setup-go@v5
      with:
        go-version-file: ${{ inputs.goversion }}
      if: ${{ inputs.goversion != '' && endsWith(inputs.goversion, 'go.mod') }}
        
    - name: Setup Go (with version)
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.goversion == '' && 'stable' || inputs.goversion }}
      if: ${{ inputs.goversion == '' || !endsWith(inputs.goversion, 'go.mod') }}
        
    - name: Install UPX
      if: ${{ inputs.executable_compression != '' }}
      shell: bash
      run: |
        if [[ "${{ inputs.executable_compression }}" =~ ^upx.* ]]; then
          UPX_VER="${UPX_VER:-4.0.0}"
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            export arch=$(dpkg --print-architecture)
            wget --no-check-certificate --progress=dot:mega https://github.com/upx/upx/releases/download/v${UPX_VER}/upx-${UPX_VER}-${arch}_linux.tar.xz
            tar -Jxf upx-${UPX_VER}-${arch}_linux.tar.xz
            sudo mv upx-${UPX_VER}-${arch}_linux /usr/local/
            sudo ln -sf /usr/local/upx-${UPX_VER}-${arch}_linux/upx /usr/local/bin/upx
            rm upx-${UPX_VER}-${arch}_linux.tar.xz
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install upx
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            choco install upx
          fi
          upx --version
        fi
      env:
        UPX_VER: 4.0.0

    - name: Install GitHub Assets Uploader
      shell: bash
      run: |
        UPLOADER_VER="${UPLOADER_VER:-v0.13.0}"
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          export arch=$(dpkg --print-architecture)
          wget --no-check-certificate --progress=dot:mega https://github.com/wangyoucao577/assets-uploader/releases/download/${UPLOADER_VER}/github-assets-uploader-${UPLOADER_VER}-linux-${arch}.tar.gz -O github-assets-uploader.tar.gz
          tar -zxf github-assets-uploader.tar.gz
          sudo mv github-assets-uploader /usr/local/bin/
          rm -f github-assets-uploader.tar.gz
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          arch="amd64"
          if [[ "$(uname -m)" == "arm64" ]]; then
            arch="arm64"
          fi
          wget --no-check-certificate --progress=dot:mega https://github.com/wangyoucao577/assets-uploader/releases/download/${UPLOADER_VER}/github-assets-uploader-${UPLOADER_VER}-darwin-${arch}.tar.gz -O github-assets-uploader.tar.gz
          tar -zxf github-assets-uploader.tar.gz
          sudo mv github-assets-uploader /usr/local/bin/
          rm -f github-assets-uploader.tar.gz
        elif [[ "$RUNNER_OS" == "Windows" ]]; then
          curl -L https://github.com/wangyoucao577/assets-uploader/releases/download/${UPLOADER_VER}/github-assets-uploader-${UPLOADER_VER}-windows-amd64.zip -o github-assets-uploader.zip
          unzip github-assets-uploader.zip
          mkdir -p /usr/bin 2>/dev/null || true
          mv github-assets-uploader.exe /usr/bin/ 2>/dev/null || mv github-assets-uploader.exe /c/Windows/System32/ 2>/dev/null || echo "github-assets-uploader.exe" >> $GITHUB_PATH
          rm -f github-assets-uploader.zip
        fi
        github-assets-uploader -version
      env:
        UPLOADER_VER: v0.13.0

    - name: Build and Release
      shell: bash
      run: |
        # Debug: Print Go version and environment
        echo "=== Go Version and Environment ==="
        go version
        echo ""
        echo "=== Environment Variables ==="
        env | sort
        echo ""
        
        # Make release script executable
        chmod +x "${{ github.action_path }}/release.sh"
        
        # Handle pre_command properly if it contains multiple lines
        PRE_CMD='${{ inputs.pre_command }}'
        if [ ! -z "$PRE_CMD" ]; then
          echo "=== Executing Pre-Command ==="
          eval "$PRE_CMD"
          echo "=== Pre-Command Completed ==="
          echo ""
        fi
        
        # Set environment variables from inputs
        export INPUT_GITHUB_TOKEN="${{ inputs.github_token }}"
        export INPUT_GOOS="${{ inputs.goos }}"
        export INPUT_GOARCH="${{ inputs.goarch }}"
        export INPUT_GOAMD64="${{ inputs.goamd64 }}"
        export INPUT_GOARM="${{ inputs.goarm }}"
        export INPUT_GOMIPS="${{ inputs.gomips }}"
        export INPUT_GOVERSION="${{ inputs.goversion }}"
        export INPUT_BUILD_FLAGS="${{ inputs.build_flags }}"
        export INPUT_LDFLAGS="${{ inputs.ldflags }}"
        export INPUT_PROJECT_PATH="${{ inputs.project_path }}"
        export INPUT_BINARY_NAME="${{ inputs.binary_name }}"
        export INPUT_PRE_COMMAND=""  # Clear this since we handled it above
        export INPUT_BUILD_COMMAND="${{ inputs.build_command }}"
        export INPUT_EXECUTABLE_COMPRESSION="${{ inputs.executable_compression }}"
        export INPUT_EXTRA_FILES="${{ inputs.extra_files }}"
        export INPUT_MD5SUM="${{ inputs.md5sum }}"
        export INPUT_SHA256SUM="${{ inputs.sha256sum }}"
        export INPUT_RELEASE_TAG="${{ inputs.release_tag }}"
        export INPUT_RELEASE_NAME="${{ inputs.release_name }}"
        export INPUT_RELEASE_REPO="${{ inputs.release_repo }}"
        export INPUT_OVERWRITE="${{ inputs.overwrite }}"
        export INPUT_ASSET_NAME="${{ inputs.asset_name }}"
        export INPUT_RETRY="${{ inputs.retry }}"
        export INPUT_POST_COMMAND="${{ inputs.post_command }}"
        export INPUT_COMPRESS_ASSETS="${{ inputs.compress_assets }}"
        export INPUT_UPLOAD="${{ inputs.upload }}"
        export INPUT_MULTI_BINARIES="${{ inputs.multi_binaries }}"
        
        # Run the release script
        "${{ github.action_path }}/release.sh"

branding:
  icon: 'package'
  color: 'blue'
